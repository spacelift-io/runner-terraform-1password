name: Publish ðŸš€

on:
  schedule:
    - cron: '0 5,19 * * *'
  workflow_dispatch:

jobs:
  deployment:
    name: Publish the image
    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: write
    steps:
      - name: Check out repository code
        uses: actions/checkout@main
        with:
          fetch-depth: 0

      - name: Get latest 1Password CLI version
        run: |
            VERSION=$(python get_latest_cli_version.py)
            echo "CLI_VERSION=$VERSION" >> $GITHUB_ENV

      - name: Check if tag exists already
        id: check_tag
        run: |
          if git rev-parse ${{ env.CLI_VERSION }} >/dev/null 2>&1
          then
            echo "tag_exists=true" >> $GITHUB_OUTPUT
          else
            echo "tag_exists=false" >> $GITHUB_OUTPUT
          fi

      - name: Set image name as env var
        if: steps.check_tag.outputs.tag_exists == 'false'
        run: |
          echo "IMAGE_NAME=ghcr.io/${{ github.repository }}:${{ env.CLI_VERSION }}" >> $GITHUB_ENV
          echo "IMAGE_NAME_LATEST=ghcr.io/${{ github.repository }}:latest" >> $GITHUB_ENV

      - name: Set up QEMU
        if: steps.check_tag.outputs.tag_exists == 'false'
        uses: docker/setup-qemu-action@v3
        with:
          platforms: linux/arm64

      - name: Log in to GitHub registry
        if: steps.check_tag.outputs.tag_exists == 'false'
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup buildx
        if: steps.check_tag.outputs.tag_exists == 'false'
        uses: docker/setup-buildx-action@v3

      - name: Docker meta
        if: steps.check_tag.outputs.tag_exists == 'false'
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/${{ github.repository }}

      - name: Build the image
        if: steps.check_tag.outputs.tag_exists == 'false'
        uses: docker/build-push-action@v6
        with:
          platforms: linux/amd64,linux/arm64
          push: true
          labels: ${{ steps.meta.outputs.labels }}
          build-args: |
            OP_VERSION=${{ env.CLI_VERSION }}
          tags: |
            ${{ env.IMAGE_NAME }}
            ${{ env.IMAGE_NAME_LATEST }}

      - name: Push tag
        if: steps.check_tag.outputs.tag_exists == 'false'
        run: |
          git config --local user.email "cicd@spacelift.io"
          git config --local user.name "Spacelift CI/CD"
          git tag -a ${{ env.CLI_VERSION }} -m "1 Password CLI v${{ env.CLI_VERSION }}"
          git push origin ${{ env.CLI_VERSION }}

      - name: Create release
        if: steps.check_tag.outputs.tag_exists == 'false'
        uses: ncipollo/release-action@v1
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          name: ${{ env.CLI_VERSION }}
          tag: ${{ env.CLI_VERSION }}
          makeLatest: true
          skipIfReleaseExists: true
          body: |
            Release of 1Password CLI v${{ env.CLI_VERSION }} on Alpine Linux.
            The image is available on GitHub Container Registry:
            - [`${{ env.IMAGE_NAME }}`](https://github.com/${{ github.repository }}/pkgs/container/runner-terraform-1password)
